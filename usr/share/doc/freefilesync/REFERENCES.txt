########################################
# REFERENCE 1
https://www.freefilesync.org/forum/viewtopic.php?t=2585&p=13068&hilit=build#p13068
 Post by DrGuenter • 31 Oct 2016, 22:20
Quick update ...
... I've just commented the uncompiling lines, and I succeeded FileSync 8.6 to build and run on openSUSE 13.1.

Code: Select all
ui/small_dlgs.cpp:796
//  m_gridCustomCommand->SetTabBehaviour(wxGrid::Tab_Leave);

Code: Select all
ui/main_dlg.cpp:1046
// globalSettings.gui.cfgFileHistFirstItemPos = m_listBoxHistory->GetTopItem();
Cool stuff...

########################################
# REFERENCE 2
https://www.freefilesync.org/forum/viewtopic.php?t=676
 Post by coderforlife • 28 May 2014, 01:55
For future reference, I was able to compile it using the following:

1. Run `sudo yum install gtk3-devel wxGTK3-devel`
2. Download FreeFileSync_*_Source.zip from downloads (where * is version number)
3. Download zenXml_*.zip from https://sourceforge.net/projects/zenxml/files/
4. Create a build folder (e.g. ffs-build)
5. Unzip FreeFileSync_*_Source.zip to the build folder
6. Create the folder zenXml in the build folder
7. Unzip zenXml_*.zip to the zenXml folder in the build folder
8. Edit FreeFileSync/Source/Makefile; replace gtk+-2.0 with gtk+-3.0 (2 places)
9. Edit zen/file_handling.cpp; replace SYMLINK_FOLLOW with ProcSymlink::FOLLOW (3 places)
10. Run `make BUILD=Launchpad` in FreeFileSync/Source
11. Run `sudo make install` in FreeFileSync/Source

Step 8 is needed since this code requires wx >=2.9 but on Fedora 20 GTK-2.0 only works with 2.8.12. GTK-3.0 works with wx 3.0 though.

Step 9 is needed because of copy-paste errors in the code. It looks like that code is only run when SELinux is detected, so it is possible that it was just never caught because it was never compiled on an SE-Linux-enabled system.

Developers: please at least correct the bug in step 9.

########################################
# REFERENCE 3
https://github.com/PhantomX/chinforpms/blob/9e65a18f78c6e842958a84d1862435495b77ef33/freefilesync/freefilesync.spec

%global pname FreeFileSync

Name:           freefilesync
Version:        9.2
Release:        1%{?dist}
Summary:        A file synchronization utility

License:        GPLv3
URL:            http://www.freefilesync.org/
Source0:        http://www.freefilesync.org/download/%{pname}_%{version}_Source.zip
Source1:        https://aur.archlinux.org/cgit/aur.git/plain/ffsicon.png?h=%{name}#/%{pname}.png
Source2:        https://aur.archlinux.org/cgit/aur.git/plain/rtsicon.png?h=%{name}#/RealTimeSync.png

BuildRequires:  ImageMagick
BuildRequires:  pkgconfig(gtk+-2.0)
BuildRequires:  pkgconfig(libselinux)
BuildRequires:  boost-devel
BuildRequires:  compat-wxGTK3-gtk2-devel
Requires:       hicolor-icon-theme

%description
FreeFileSync is a free Open Source software that helps you synchronize
files and synchronize folders for Windows, Linux and macOS. It is
designed to save your time setting up and running backup jobs while
having nice visual feedback along the way.

%prep
%autosetup -p0 -c -n %{pname}-%{version}

find -type d 

cp %{SOURCE1} %{SOURCE2} .

chmod -x *.txt
sed 's/\r//' -i *.txt

sed \
  -e '/DOCSHAREDIR/d' \
  -e 's|wx-config |wx-config-3.0-gtk2 |g' \
  -e '/CXXFLAGS/s|-O3|-D"warn_static(arg)= " -DZEN_LINUX %{optflags}|g' \
  -e '/LINKFLAGS/s|-s|%{__global_ldflags}|g' \
  -i %{pname}/Source/Makefile %{pname}/Source/RealTimeSync/Makefile

sed 's/m_listBoxHistory->GetTopItem()/0/g' -i %{pname}/Source/ui/main_dlg.cpp

sed -i 's!static_assert!//static_assert!' zen/scope_guard.h

sed 's#inline##g' -i  %{pname}/Source/ui/version_check_impl.h

%build
%make_build -C %{pname}/Source
%make_build -C %{pname}/Source/RealTimeSync


%install
%make_install -C %{pname}/Source
%make_install -C %{pname}/Source/RealTimeSync

find %{buildroot}%{_datadir}/%{pname} -type f -exec chmod -x '{}' ';'

# Desktop files borrowed from https://aur.archlinux.org/packages/freefilesync and edited
mkdir -p %{buildroot}%{_datadir}/applications

cat > %{buildroot}%{_datadir}/applications/%{pname}.desktop <<EOF
[Desktop Entry]
Name=%{pname}
GenericName=File synchronization
GenericName[pt_BR]=Sincronização de arquivos
Comment=Backup software to synchronize files and folders
Comment[pt_BR]=Aplicação de backup para sincronizar arquivos e diretórios
Exec=%{pname}
Icon=%{pname}
Terminal=false
Type=Application
StartupNotify=true
Categories=GTK;Utility;
EOF

cat > %{buildroot}%{_datadir}/applications/RealTimeSync.desktop <<EOF
[Desktop Entry]
Name=RealTimeSync
GenericName=Automated Synchronization
GenericName[pt_BR]=Sincronização Automatizada
Comment=Real time synchronization
Comment[pt_BR]=Sincronização em tempo real
Exec=RealTimeSync
Icon=RealTimeSync
Terminal=false
Type=Application
StartupNotify=true
Categories=GTK;Utility;
EOF

mkdir -p %{buildroot}%{_datadir}/icons/hicolor/128x128/apps
install -pm0644 %{pname}.png RealTimeSync.png \
  %{buildroot}%{_datadir}/icons/hicolor/128x128/apps/

for res in 16 22 24 32 48 64 72 96 ;do
  dir=%{buildroot}%{_datadir}/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  for icon in %{pname} RealTimeSync ;do
    convert ${icon}.png -filter Lanczos -resize ${res}x${res}  \
      ${dir}/${icon}.png
  done
done


%post
touch --no-create %{_datadir}/icons/hicolor &>/dev/null || :

%postun
if [ $1 -eq 0 ] ; then
  touch --no-create %{_datadir}/icons/hicolor &>/dev/null
  gtk-update-icon-cache %{_datadir}/icons/hicolor &>/dev/null || :
fi

%posttrans
gtk-update-icon-cache %{_datadir}/icons/hicolor &>/dev/null || :

%files
%license License.txt
%doc Changelog.txt
%{_bindir}/%{pname}
%{_bindir}/RealTimeSync
%{_datadir}/applications/*.desktop
%{_datadir}/icons/hicolor/*x*/apps/*.png
%{_datadir}/%{pname}


%changelog
* Tue Jul 25 2017 Phantom X <megaphantomx at bol dot com dot br> - 9.2-1
- 9.2

* Thu Jun 15 2017 Phantom X <megaphantomx at bol dot com dot br> - 9.1-1
- 9.1

* Thu Mar 30 2017 Phantom X <megaphantomx at bol dot com dot br> - 8.10-1
- Initial spec.

########################################
# REFERENCE 4
https://www.freefilesync.org/forum/viewtopic.php?t=4288&p=14356&hilit=compile#p14356
Here are my notes from my successful build, as far as I can tell the program runs correctly but please do not try it with any data you can't afford to lose until you are confident it is working correctly for you (I make no guarantees as I have only tested the program briefly). The build from source is quick and easy so long as you have installed all the required libraries and edit some problem code in a couple of the source files.

Several development libraries are needed as these are not installed by default in the standard Linux Mint 18.1 Mate desktop distribution. You also need to install the g++ c-plusplus compiler before you begin. I also suggest installing remake and using this instead of make as the diagnostics are more extensive if the make process fails for any reason.

You will need to install the following:

sudo apt install g++ libwxgtk3.0-dev libgtk2.0-dev libboost-dev libboost-thread-dev libboost-chrono-dev libboost-system-dev

Now download and unzip the source code from https://www.freefilesync.org/download.php

cd to the top of the newly unzipped folder structure and make the edits listed in the diff file output below (the listing shows the differences between the downloaded source files (file a) and the edited version needed to compile without errors (file b)).

There is just one line to add to /Source/fs/abstract.h and one line and two blocks of code to comment out in /Source/ui/main_dlg.cpp. For those unfamiliar with diff output the lines between the @@ list the file line number and the range of lines listed out with the file differences. Any lines with the leading - need to replaced by the lines with the leading + . In the case of the first difference only a single line needs to be added so there is no line with a leading - :

diff --git a/FreeFileSync/Source/fs/abstract.h b/FreeFileSync/Source/fs/abstract.h
index eece564..eef41fb 100755
--- a/FreeFileSync/Source/fs/abstract.h
+++ b/FreeFileSync/Source/fs/abstract.h
@@ -12,6 +12,7 @@
#include <zen/zstring.h>
#include <zen/optional.h>
#include <zen/serialize.h> //InputStream/OutputStream support buffered stream concept
+#include <zen/warn_static.h> //Added to avoid make file errors
#include "../lib/icon_holder.h"


diff --git a/FreeFileSync/Source/ui/main_dlg.cpp b/FreeFileSync/Source/ui/main_dlg.cpp
index ebe4101..071206a 100755
--- a/FreeFileSync/Source/ui/main_dlg.cpp
+++ b/FreeFileSync/Source/ui/main_dlg.cpp
@@ -956,7 +956,7 @@ xmlAccess::XmlGlobalSettings MainDialog::getGlobalCfgBeforeExit()
history.resize(globalSettings.gui.cfgFileHistMax);

globalSettings.gui.cfgFileHistory = history;
- globalSettings.gui.cfgFileHistFirstItemPos = m_listBoxHistory->GetTopItem();
+// globalSettings.gui.cfgFileHistFirstItemPos = m_listBoxHistory->GetTopItem();
//--------------------------------------------------------------------------------
globalSettings.gui.lastUsedConfigFiles.clear();
for (const Zstring& cfgFilePath : activeConfigFiles)
@@ -4771,13 +4771,13 @@ void MainDialog::OnMenuCheckVersionAutomatically(wxCommandEvent& event)

m_menuItemCheckVersionAuto->Check(updateCheckActive(globalCfg.gui.lastUpdateCheck));

- if (shouldRunPeriodicUpdateCheck(globalCfg.gui.lastUpdateCheck))
+/* if (shouldRunPeriodicUpdateCheck(globalCfg.gui.lastUpdateCheck))
{
flashStatusInformation(_("Searching for program updates..."));
//synchronous update check is sufficient here:
periodicUpdateCheckEval(this, globalCfg.gui.lastUpdateCheck, globalCfg.gui.lastOnlineVersion,
periodicUpdateCheckRunAsync(periodicUpdateCheckPrepare().get()).get());
- }
+ } */
}


@@ -4786,7 +4786,7 @@ void MainDialog::OnRegularUpdateCheck(wxIdleEvent& event)
//execute just once per startup!
Disconnect(wxEVT_IDLE, wxIdleEventHandler(MainDialog::OnRegularUpdateCheck), nullptr, this);

- if (shouldRunPeriodicUpdateCheck(globalCfg.gui.lastUpdateCheck))
+/* if (shouldRunPeriodicUpdateCheck(globalCfg.gui.lastUpdateCheck))
{
flashStatusInformation(_("Searching for program updates..."));

@@ -4798,7 +4798,7 @@ void MainDialog::OnRegularUpdateCheck(wxIdleEvent& event)
periodicUpdateCheckEval(this, globalCfg.gui.lastUpdateCheck, globalCfg.gui.lastOnlineVersion,
resultAsync.get()); //run on main thread:
});
- }
+ } */
}

having saved the newly edited files
cd to the /Source directory
now build the program with
make
(you will get one or two warnings but the make should complete without fatal errors)
followed by
sudo make install

You can then add the program to your Mint Menu and you will find a nice png image for the program launch icon in /usr/share/FreeFileSync/Resources.zip named FreeFileSync.png. So extract this png file into /usr/share/FreeFileSync (you will need root privileges for this) and link to this when you add the FreeFileSync menu item.

I used git to track all my edits as I was debugging the build process documented above and I recommend you initiate a git project in the unzipped source files folder too if you wish to try your own changes to the source.

good luck,
doubledodge
